COMMENT: This file tests reduce-mode syntactic highlighting and
delimiter matching.  It begins with a multi-line comment statement
followed by some examples provided by Andrey Grozin.$

x(1):=1$
x(1) :=1$
x(1):= 1$
x(1) := 1$

% for, all, such, that, let, clear, match should be purple; f should be blue:
for all x,y let f(x,y)=0;
for all x,y clear f(x,y);
for all x,y such that x<0 let f(x,y)=0;
for all x,y such that x<0 clear f(x,y);

for all n1,n2 match x1^n1*x2^n2=f(n1,n2);

a where {f(~x)=>0,y=>0} when x>0; % where, when should be purple; f should blue

Comment End of Grozin Examples$

% for, do, write, step, until should be purple; e, pi, i should be dark cyan:
for i := 0 : 10 do write i;
for j := 0 step 2 until 10 do write j;

e^(pi*i) = -1;
-2 = 2e^(pi*i);

{Catalan, Euler_Gamma, Golden_Ratio, Khinchin};

symbolic prin2t(t neq nil);

factor x,cos,sin(x);
remfac x,cos,sin(x);

% array, matrix, vector, operator should be green; a, b, c, x, y, x, p1, p2 should be blue:
array a(10),b(2,3,4);
a(10),b(2,3,4);

array a 10, c 57;
a 10, c 57;

matrix x(2,1),y(3,4),z;
matrix m; operator x; m := mat(x(1,1),x(1,2));

vector p1,p2;

% even, odd etc. should be green; arguments should be blue:
even f1; odd f2;
linear f,g; noncom u,v;
symmetric u,v; antisymmetric l,m;
operator h,g1,arctan;
infix mm; precedence mm,-;

z**2+fac(4)-2*fac 2*y;
2*det xx - 3*w;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Comment Delimiter Highlighting, etc.$

( () { { } } );  ( ();
<< << >> >>;  << << >>;
begin begin end end;  begin begin end;  beginning begin noend end;

% *** INDENTATION PROBLEMS IN FOLLOWING BLOCK: ***

/* before block */
begin /* in block */ scalar var; % in block
   comment What an ugly block!$
   var /* in block */ := /* in block */ x^2; % in block
   comment That was a pointless assignment.;
   return /* in block */ var % in block
end /* after block */ ;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/* This is a C-style comment! */

Comment The above line no longer breaks this comment!$

procedure foo; bar;

procedure /* comment here OK */ foo1; bar;

procedure
   foo2 /* comment here OK */ x; /* comment here OK */ bar;

!Strange + var!"iable + !!names + ! spaced! ;

"This is a string!";
"It contains keywords: comment, procedure, operator, lisp, algebraic.";

procedure % comment here OK
   foo3 % and here!
   (x,y); bar;

% Check indentation and filling:

/* The immediately preceding line, without a semicolon, is the
   computed output generated by the line with a semicolon which
   precedes it.  Note that exact indefinite-precision rational
   arithmetic was used, in contrast to the limited-precision
   arithmetic of traditional programming languages. */

/* We can use the name R2D2 to represent its value in subsequent */
/* expressions such as; */

write "This is a very long multi-line string padded out with garbage to make
it longer and longer...!";

% String continuations should indent to column zero!

Comment This is here to check that the indentation is correct after a
multi-line comment statement (which it appears to be!);

x := a + b;

%%% Recommended end-of-file marker...

;end;

%%% End of file
